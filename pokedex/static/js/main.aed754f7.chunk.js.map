{"version":3,"sources":["data.js","components/Pokemon.js","components/Pokedex.js","App.js","serviceWorker.js","index.js"],"names":["pokemons","id","name","type","averageWeight","value","measurementUnit","image","moreInfo","capaciteSignature","Pokemon","this","props","pokemon","taille","className","src","height","alt","React","Component","Pokedex","map","x","key","App","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oMAuGeA,G,YAvGE,CACf,CACEC,GAAI,EACJC,KAAM,OACNC,KAAM,UACNC,cAAe,CACbC,MAAO,KACPC,gBAAiB,MAEnBC,MAAO,eACPC,SAAU,IAEZ,CACEP,GAAI,EACJC,KAAM,QACNC,KAAM,SACNC,cAAe,CACbC,MAAO,KACPC,gBAAiB,MAEnBC,MAAO,eACPC,SAAU,IAEZ,CACEP,GAAI,EACJC,KAAM,iBACNC,KAAM,gBACNC,cAAe,CACbC,MAAO,KACPC,gBAAiB,MAEnBC,MAAO,eACPC,SAAU,IAGZ,CACEP,GAAI,EACJC,KAAM,YACNC,KAAM,eACNC,cAAe,CACbC,MAAO,MACPC,gBAAiB,MAEnBC,MAAO,uBACPC,SAAU,UAEZ,CACEP,GAAI,EACJC,KAAM,SACNC,KAAM,eACNC,cAAe,CACbC,MAAO,KACPC,gBAAiB,MAEnBC,MAAO,oBACPC,SAAU,SAEZ,CACEP,GAAI,EACJC,KAAM,YACNC,KAAM,eACNC,cAAe,CACbC,MAAO,MACPC,gBAAiB,MAEnBC,MAAO,uBACPC,SAAU,SACVC,kBAAmB,qBAErB,CACER,GAAI,EACJC,KAAM,iBACNC,KAAM,gBACNC,cAAe,CACbC,MAAO,KACPC,gBAAiB,MAEnBC,MAAO,4BACPC,SAAU,SAEZ,CACEP,GAAI,EACJC,KAAM,UACNC,KAAM,gBACNC,cAAe,CACbC,MAAO,KACPC,gBAAiB,MAEnBC,MAAO,qBACPC,SAAU,SAEZ,CACEP,GAAI,EACJC,KAAM,mBACNC,KAAM,gBACNC,cAAe,CACbC,MAAO,KACPC,gBAAiB,MAEnBC,MAAO,8BACPC,SAAU,Y,4BCvECE,E,uKA1BH,IAAD,EAQHC,KAAKC,MAAMC,QANbX,EAFK,EAELA,KACAC,EAHK,EAGLA,KACAI,EAJK,EAILA,MACAH,EALK,EAKLA,cAEAK,GAPK,EAMLK,OANK,EAOLL,mBAEF,OACE,yBAAKM,UAAU,aACb,yBAAKA,UAAU,QACb,2BAAIb,GACJ,qCAAWC,GACX,sCAAYC,EAAcC,MAA1B,OAIA,mDAAyBI,IAE3B,yBAAKO,IAAKT,EAAOU,OAAO,QAAQC,IAAI,c,GArBtBC,IAAMC,WCcbC,E,uKAZH,IACArB,EAAaW,KAAKC,MAAlBZ,SACR,OACE,6BACGA,EAASsB,KAAI,SAAAC,GAAC,OACb,kBAAC,EAAD,CAASC,IAAKD,EAAErB,KAAMW,QAASU,Y,GANnBJ,IAAMC,WCgBbK,MAbf,WACE,OACE,oCACE,yBAAKV,UAAU,OACb,0DAEF,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAASf,SAAU0B,OCDPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.aed754f7.chunk.js","sourcesContent":["const pokemons = [\n  {\n    id: 1,\n    name: 'Abel',\n    type: 'Tenebre',\n    averageWeight: {\n      value: '36',\n      measurementUnit: 'kg',\n    },\n    image: 'images/1.jpg',\n    moreInfo: '',\n  },\n  {\n    id: 2,\n    name: 'Lazlo',\n    type: 'Dragon',\n    averageWeight: {\n      value: '42',\n      measurementUnit: 'kg',\n    },\n    image: 'images/3.jpg',\n    moreInfo: '',\n  },\n  {\n    id: 3,\n    name: 'Psycholamandre',\n    type: 'Plante et psy',\n    averageWeight: {\n      value: '12',\n      measurementUnit: 'kg',\n    },\n    image: 'images/4.png',\n    moreInfo: '',\n  },\n\n  {\n    id: 4,\n    name: 'Lezarobot',\n    type: 'Feu et acier',\n    averageWeight: {\n      value: '105',\n      measurementUnit: 'kg',\n    },\n    image: 'images/lezarobot.png',\n    moreInfo: '120 cm',\n  },\n  {\n    id: 5,\n    name: 'Ca-bot',\n    type: 'Feu et acier',\n    averageWeight: {\n      value: '20',\n      measurementUnit: 'kg',\n    },\n    image: 'images/ca-bot.png',\n    moreInfo: '30 cm',\n  },\n  {\n    id: 6,\n    name: 'Pyroïd',\n    type: 'Feu et acier',\n    averageWeight: {\n      value: '300',\n      measurementUnit: 'kg',\n    },\n    image: 'images/Pyroïd.png',\n    moreInfo: '180 cm',\n    capaciteSignature: 'Pyro gadjeto bras'\n  },\n  {\n    id: 7,\n    name: 'Psycholamandre',\n    type: 'Psy et plante',\n    averageWeight: {\n      value: '15',\n      measurementUnit: 'kg',\n    },\n    image: 'images/psycholamandre.png',\n    moreInfo: '70 cm',\n  },\n  {\n    id: 8,\n    name: 'Mageeko',\n    type: 'Psy et plante',\n    averageWeight: {\n      value: '30',\n      measurementUnit: 'kg',\n    },\n    image: 'images/Mageeko.png',\n    moreInfo: '90 cm',\n  },\n  {\n    id: 9,\n    name: 'Yogaméléon',\n    type: 'Psy et plante',\n    averageWeight: {\n      value: '60',\n      measurementUnit: 'kg',\n    },\n    image: 'images/Yogaméléon.png',\n    moreInfo: '170 cm',\n  },\n];\nexport default pokemons;\n","import React from 'react';\n\nclass Pokemon extends React.Component {\n  render() {\n    const {\n      name,\n      type,\n      image,\n      averageWeight,\n      taille,\n      capaciteSignature,\n    } = this.props.pokemon;\n    return (\n      <div className=\"container\">\n        <div className=\"text\">\n          <p>{name}</p>\n          <p>Type : {type}</p>\n          <p>Poids : {averageWeight.value} kg</p>\n          {/* <p>\n            Taille : {taille.valeur} {taille.unite}\n          </p> */}\n          <p>Capacite Signature : {capaciteSignature}</p>\n        </div>\n        <img src={image} height=\"100px\" alt=\"Logo\" />\n      </div>\n    );\n  }\n}\n\nexport default Pokemon;\n","import React from 'react';\nimport Pokemon from './Pokemon';\n\nclass Pokedex extends React.Component {\n  render() {\n    const { pokemons } = this.props;\n    return (\n      <div>\n        {pokemons.map(x => (\n          <Pokemon key={x.name} pokemon={x} />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Pokedex;\n","import React from 'react';\nimport './App.css';\nimport data from './data';\n// import dataexterne from '../public/testdata';\nimport Pokedex from './components/Pokedex';\n\nfunction App() {\n  return (\n    <>\n      <div className=\"App\">\n        <h1>Pokedex de Abel et Lazlo!</h1>\n     </div>\n      <div className=\"App\">\n        <Pokedex pokemons={data} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}